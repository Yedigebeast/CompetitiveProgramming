/*
Числа Каталана встречаются в большом количестве задач комбинаторики. n-ое число Каталана — это:

1)Количество корректных скобочных последовательностей, состоящих из n открывающих и n закрывающих скобок.
2)Количество корневых бинарных деревьев с n+1 листьями (вершины не пронумерованы).
3)Количество способов полностью разделить скобками n+1 множитель.
4)Количество триангуляций выпуклого n+2-угольника (т.е. количество разбиений многоугольника непересекающимися диагоналями на треугольники).
5)Количество способов соединить 2n точек на окружности n непересекающимися хордами.
6)Количество неизоморфных полных бинарных деревьев с n внутренними вершинами (т.е. имеющими хотя бы одного сына).
7)Количество монотонных путей из точки (0,0) в точку (n,n) в квадратной решётке размером n \times n, не поднимающихся над главной диагональю.
8)Количество перестановок длины n, которые можно отсортировать стеком (можно показать, что перестановка является сортируемой стеком тогда и только тогда, когда нет таких индексов i<j<k, что a_k<a_i<a_j).
9)Количество непрерывных разбиений множества из n элементов (т.е. разбиений на непрерывные блоки).
10)Количество способов покрыть лесенку 1 \ldots n с помощью n прямоугольников (имеется в виду фигура, состоящая из n столбцов, i-ый из которых имеет высоту i).

*/
#include <iostream>
#include <string>

using namespace std;

long long cat[120][100000] , sz[120], c[100000], szc;

void kos(long long a){
    long long len = max(sz[a], szc) + 10;
    for (int i = 1; i <= len; i++){
        cat[a][i] += c[i];
        cat[a][i + 1] += (cat[a][i] / 10);
        cat[a][i] %= 10;
    }
    while (cat[a][len] == 0){
        len--;
    }
    sz[a] = len;
}

void mul(long long a, long long b){
    for (int i = 1; i <= szc; i ++){
        c[i] = 0;
    }
    szc = 0;
    long long len = sz[a] + sz[b] + 10;
    for (int i = 1; i <= sz[a]; i++){
        for (int j = 1; j <= sz[b]; j++){
            c[i + j - 1] += (cat[a][i] * cat[b][j]);
        }
    }
    for (int i = 1; i <= len; i++){
        c[i + 1] +=  (c[i] / 10);
        c[i] = c[i] % 10;
    }
    while (c[len] == 0){
        len--;
    }
    szc = len;
}
int main(){
    cat[0][1] = 1;
    sz[0] = 1;
    for (int i = 1; i <= 105; i++){
        for (int k = 0; k <= i - 1; k++){
            mul(k, i - k - 1);
            kos(i);
        }
    }
    int n;
    while(cin >> n){
        if (n == -1){
            break;
        }
        for (int i = sz[n]; i >= 1; i --){
            cout << cat[n][i];
        }
        cout << "\n";
    }
    exit(0);
}

